import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import FullCalendar from "@fullcalendar/react";
import dayGridMonth from "@fullcalendar/daygrid";

const inter = Inter({ subsets: ["latin"] });

type Props = {
  data: any;
};

export default function Home({ data }: Props) {
  // console.log(props);
  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <FullCalendar
          plugins={[dayGridMonth]}
          initialView="dayGridMonth"
          events={data}
          // dayMaxEventRows={4}
        />
      </main>
    </>
  );
}

/**
 *
 * 1. 개발 서버에서 3000개의 예약 데이터를 서버에서 받아 캘린더에 그리도록 설정할 때
 *  - 로딩중 화면이 잠깐씩 멈추는 현상이 발생
 *  - findInsersion <- insertEntry <- addSegs 함수에서 시간이 오래걸리는걸 확인
 *  - 디버거를 통해 동작 과정을 살펴본 결과
 *    - 셀에 표시될 데이터를 정제하는 역할로 보임
 *    - 일주일 단위로 셀의 데이터를 정제
 *    - 3000개의 데이터가 포함된 셀 데이터를 정제시 멈춤현상이 발생
 *    - 동작 과정에 대해 면밀하게 확인이 필요함
 *    - TableRow -> render -> computeFgSegPlacement => cell
 *     - 이 과정이 상태가 변경될 때 마다 계속 반복됨
 *     - 3000개의 예약 정보를 사용하는 로직이 계속 수행됨
 *    - 위 과정이 Calendar Root 컴포넌트에서 flushSync를 호출하는 함수(renderRunner.request)를 호출하는데 라이프 사이클에 의존하여 호출하고 있음
 *    - Calendar render -> destory -> render 메서드를 호출하면서 에약 데이터를 seg(이벤트 메타 정보)객체로 일반화시키는 작업을 진행하는데
 *      - 이 작업이 각 단계별로 실행이 되고 있음
 *
 * 2. javascript 함수의 호출 순서가 역순으로 되어 있는 이유
 *  - 개인적인 생각
 *    - 자체 시간과, 총 시간을 보고 이해하는데 수월하기 때문이라 생각함
 *    - A -> B -> C 호출을 한다고 했을 때 C <- B <- A 순서로 보여지게 되는데
 *    - B 함수의 자체시간을 확인한다고 하면 B의 총시간 - C의 총시간 => B의 자체 시간
 *
 * - 참조
 *  - Chrome performance compile code - https://stackoverflow.com/questions/48850493/what-are-parse-compile-and-evaluate-in-devtools-performance-tool
 */
export const getServerSideProps = async () => {
  const res = await fetch("http://localhost:4000/fullcalendar/reservation", {
    method: "GET",
  });
  const data = await res.json();

  return {
    props: {
      // data: [
      //   {
      //     title: "test",
      //     date: "2024-07-19",
      //   },
      // ],
      data,
    },
  };
};
